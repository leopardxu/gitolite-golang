# Gitolite-Golang 配置文件
repo_base: "****/gitolite/repositories"
gerrit_url: "******"
gerrit_user: "******"
gerrit_remote_url: "******"
gerrit_api_token: "******"
authorized_keys: "****/.ssh/authorized_keys"
# 权限和钩子配置
access_config: "****/.gitolite/conf/gitolite.conf"
hooks_dir: "****/.gitolite/hooks"

# 镜像配置
mirror:
  enabled: true  # 是否启用镜像功能
  schedule: "@hourly"  # 定时镜像调度（Cron表达式，@hourly表示每小时执行一次）
  targets:
    - name: backup-server  # 镜像目标名称
      url: ssh://git@backup-server.example.com/git-mirror/  # 镜像服务器URL
      enabled: true  # 是否启用此镜像目标
      async: true    # 是否异步推送（不阻塞主操作）
      timeout: 300   # 推送超时时间（秒）
      all_repos: false  # 是否镜像所有仓库
      repos:  # 需要镜像的仓库列表（如果all_repos为false）
        - project1
        - project2
        - group1/*  # 支持通配符
    
    - name: disaster-recovery
      url: ssh://git@dr-server.example.com/repositories/
      enabled: true
      async: false  # 同步推送（等待推送完成）
      timeout: 600
      all_repos: true  # 镜像所有仓库

log:
  path: "****/gitolite/gitolite-shell.log"
  level: DEBUG  # 可选值: INFO, WARN, ERROR
  rotation: daily  # 日志轮转周期: daily 或 weekly
  compress: true   # 是否压缩旧日志
  max_age: 30      # 日志保留天数
audit:
  enabled: true  # 是否启用审计功能
  log_path: "****/gitolite/audit.log"  # 审计日志文件路径
  console_out: true  # 是否在控制台输出结构化访问信息
whitelist:
  users:  # 跳过权限检查的用户列表
    - "gerrit-replication"
    - "git"